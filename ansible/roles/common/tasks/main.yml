---
- name: "Force a DNS on the adapter {{nat_adapter}}"
  ansible.windows.win_dns_client:
    adapter_names: "{{nat_adapter}}"
    dns_servers: 
      - "192.168.10.1"
  when: force_dns_server == "yes"


- name: Set a proxy for specific protocols
  community.windows.win_http_proxy:
    proxy:
      http: "{{ad_http_proxy}}"
      https: "{{ad_https_proxy}}"
  when: http_proxy == "yes"

- name: Configure IE to use a specific proxy per protocol
  community.windows.win_inet_proxy:
    proxy:
      http: "{{ad_http_proxy}}"
      https: "{{ad_https_proxy}}"
  when: http_proxy == "yes"

- name: Ensure TLS 1.2 is enabled for the current session
  win_shell: |
    [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12
  register: tls_result
  changed_when: false  # This command only modifies the session and doesn't require change detection

- name: Check PowerShellGet and PackageManagement version
  win_shell: |
    Get-Module PowerShellGet, PackageManagement -ListAvailable | Select-Object Name, Version
  register: module_versions

- name: Debug installed versions of PowerShellGet and PackageManagement
  debug:
    var: module_versions.stdout_lines

- name: Install latest stable version of PowerShellGet if needed
  win_shell: |
    $psGetVersion = (Get-Module PowerShellGet -ListAvailable).Version
    if ($psGetVersion -lt [version]"2.2.5") {
      Install-Module PowerShellGet -Force -AllowClobber
    }
  register: install_psget

- name: Install latest stable version of PackageManagement if needed
  win_shell: |
    $pkgMgmtVersion = (Get-Module PackageManagement -ListAvailable).Version
    if ($pkgMgmtVersion -lt [version]"1.4.8.1") {
      Install-Module PackageManagement -Force -AllowClobber
    }
  register: install_pkgmgmt

- name: Install Microsoft.PowerShell.PSResourceGet if not installed
  win_shell: |
    if (-not (Get-Module -ListAvailable -Name Microsoft.PowerShell.PSResourceGet)) {
      Install-Module Microsoft.PowerShell.PSResourceGet -Repository PSGallery
    }
  register: install_psresourceget

- name: Windows | Check for ComputerManagementDsc Powershell module
  win_shell: |
    Install-Module -Name ComputerManagementDsc -Force
    Import-Module ComputerManagementDsc
  register: install_computermanagementdsc

- name: Windows | Enable Remote Desktop
  win_dsc:
    resource_name: RemoteDesktopAdmin
    IsSingleInstance : 'yes'
    Ensure: present
    UserAuthentication: Secure

- name: Windows | Check for xNetworking Powershell module
  win_psmodule:
    name: xNetworking
    state: present

- name: Firewall | Allow RDP through Firewall
  win_dsc:
    resource_name: xFirewall
    Name: "Administrator access for RDP (TCP-In)"
    Ensure: present
    Enabled: True
    Profile: "Domain"
    Direction: "Inbound"
    Localport: "3389"
    Protocol: "TCP"

