---
- name: "Get network adapter names"
  ansible.windows.win_shell: |
    Get-NetAdapter | Where-Object { $_.Status -eq 'Up' } | Select-Object -ExpandProperty Name
  register: net_adapter

- name: "Debug network adapter name"
  debug:
    var: net_adapter.stdout_lines

- name: "Force a DNS on the adapter"
  ansible.windows.win_dns_client:
    adapter_names: "{{ net_adapter.stdout_lines[0] }}"  # Using the first adapter found
    dns_servers:
      - "192.168.10.1"
  when: force_dns_server == "yes"

- name: Disable 'Automatically detect settings' in Proxy settings
  ansible.windows.win_shell:
    _raw_params: |
      Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings" -Name "AutoDetect" -Value 0
      (Get-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings" -Name "AutoDetect").AutoDetect
  register: proxy_auto_detect

- name: Check if 'Automatically detect settings' was disabled successfully
  ansible.builtin.fail:
    msg: "'Automatically detect settings' was not disabled"
  when: proxy_auto_detect.stdout != '0'

- name: Ensure TLS 1.2 is enabled for the current session
  win_shell: |
    [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12
  register: tls_result
  changed_when: false  # This command only modifies the session and doesn't require change detection

- name: Check PowerShellGet and PackageManagement version
  win_shell: |
    Get-Module PowerShellGet, PackageManagement -ListAvailable | Select-Object Name, Version
  register: module_versions

- name: Debug installed versions of PowerShellGet and PackageManagement
  debug:
    var: module_versions.stdout_lines

- name: Install latest stable version of PowerShellGet if needed
  win_shell: |
    $psGetVersion = (Get-Module PowerShellGet -ListAvailable).Version
    if ($psGetVersion -lt [version]"2.2.5") {
      Install-Module PowerShellGet -Force -AllowClobber
    }
  register: install_psget

- name: Install latest stable version of PackageManagement if needed
  win_shell: |
    $pkgMgmtVersion = (Get-Module PackageManagement -ListAvailable).Version
    if ($pkgMgmtVersion -lt [version]"1.4.8.1") {
      Install-Module PackageManagement -Force -AllowClobber
    }
  register: install_pkgmgmt

- name: Ensure NuGet PackageProvider is installed
  ansible.builtin.win_shell: |
    $nugetProvider = Get-PackageProvider -Name NuGet -ErrorAction SilentlyContinue
    if (-not $nugetProvider -or $nugetProvider.Version -lt [version]"2.8.5.201") {
        Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
    } else {
        Write-Host "NuGet PackageProvider is already installed and meets the required version."
    }
  register: nuget_install_result
  changed_when: nuget_install_result.rc == 0


- name: Install Microsoft.PowerShell.PSResourceGet if not installed
  win_shell: |
    if (-not (Get-Module -ListAvailable -Name Microsoft.PowerShell.PSResourceGet)) {
      Install-Module Microsoft.PowerShell.PSResourceGet -Repository PSGallery
    }
  register: install_psresourceget

- name: "Ensure PSGallery repository is registered"
  win_shell: |
    Unregister-PSRepository -Name PSGallery -ErrorAction SilentlyContinue
    Register-PSRepository -Default
  register: psrepository_result
  changed_when: psrepository_result.rc == 0

- name: "Check and install ComputerManagementDsc module"
  win_shell: |
    if (-not (Get-Module -ListAvailable -Name ComputerManagementDsc)) {
      Install-Module -Name ComputerManagementDsc -Force
    }
    Import-Module ComputerManagementDsc
  register: computermgmt_result
  changed_when: computermgmt_result.rc == 0

- name: Windows | Enable Remote Desktop
  win_dsc:
    resource_name: RemoteDesktopAdmin
    IsSingleInstance : 'yes'
    Ensure: present
    UserAuthentication: Secure

- name: Windows | Check for xNetworking Powershell module
  win_psmodule:
    name: xNetworking
    state: present

- name: Firewall | Allow RDP through Firewall
  win_dsc:
    resource_name: xFirewall
    Name: "Administrator access for RDP (TCP-In)"
    Ensure: present
    Enabled: True
    Profile: "Domain"
    Direction: "Inbound"
    Localport: "3389"
    Protocol: "TCP"

